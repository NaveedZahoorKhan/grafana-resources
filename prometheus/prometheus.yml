# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

remote_write:
  - url: http://grafana-mimir:9009/api/v1/push
# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"
    honor_labels: true
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]
# Apache Servers
  - job_name: apache
    static_configs:
      - targets: ["localhost:9117"]
        labels:
          alias: server-apache
  - job_name: mssql
    static_configs:
      - targets: ["localhost:4000"]
        labels:
          alias: server-mssql
  - job_name: node
    static_configs:
      - targets: ["localhost:9100"]
        labels:
          alias: node
  - job_name: goquotes
    static_configs:
      - targets: ["goquotes:8080"]
        labels:
          alias: goquotes-metrics
  - job_name: service-a
    static_configs:
      - targets: ["service-a:8080"]
        labels:
          alias: service-a-metrics
  - job_name: service-b
    static_configs:
      - targets: ["service-b:8081"]
        labels:
          alias: service-b-metrics
  - job_name: service-c
    static_configs:
      - targets: ["service-c:8082"]
        labels:
          alias: service-c-metrics